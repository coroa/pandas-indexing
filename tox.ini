[tox]
minversion = 3.25.0
ignore_basepython_conflict = true
# these are the environments that will run when you
# execute `tox` in the command-line
# bellow you will find explanations for all environments
envlist =
    build
    docs
    test
    lint

# configures which environments run with each python version
# the current configuration has the 'test' enviroment. This will run the
# unit test for running python version. It is not needed to state the python
# version because the installation process already ensures only supported
# versions are installed
[testenv]
basepython =
    {test,build,docs,lint,radon,safety}: {env:TOXPYTHON:python3}
passenv = *

# configures the unittest environment for python 3.6
[testenv:test]
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
usedevelop = true
extras = test
# before running the tests erases any prerecord of coverage
commands_pre =
    coverage erase
# execute pytest
commands =
    pytest --cov --cov-report=term-missing --cov-append --cov-config=.coveragerc --hypothesis-show-statistics {posargs}
# after executing the pytest assembles the coverage reports
commands_post = 
    coverage report
    coverage html
    coverage xml

# in previous verions, I had independent environments to manage the
# coverage reports. However, I found that doing such as pre and post
# commands facilitates many configuration details

# separates lint from build env
[testenv:lint]
deps =
    black
    ruff
skip_install = true
commands =
    black --check --diff {posags:src tests}
    ruff --diff {posargs:src tests docs}

# asserts package build integrity
[testenv:build]
skip_install = true
deps =
    build
    twine
allowlist_externals = rm
commands_pre =
    rm -rf dist/*.whl dist/*.tar.gz || true
commands =
    python --version
    python -m build
    twine check dist/*.whl
    twine check dist/*.tar.gz

# code quality assessment. This is not a check in the CI, serves just
# as info for the developer
[testenv:radon]
deps = radon
skip_install = true
commands = 
    radon cc -s --total-average --no-assert {posargs:src/}
    radon mi -m -s {posargs:src/}

# Simulate docs building as it will occur on ReadTheDocs
# if this fails, most likely RTD build will fail
[testenv:docs]
package = editable
extras = docs
commands =
    sphinx-build {posargs:-E} -b html docs docs/html

# safety checks
[testenv:safety]
skip_install = true
deps = safety
commands = safety check
