[project]
authors = [{ name = "Jonas HÃ¶rsch", email = "coroa@posteo.de" }]
description = "Helpers to facilitate working with pandas indices in particular multiindices"
license = { text = "MIT" }
name = "pandas-indexing"
readme = "README.rst"

# complete classifier list:
# http://pypi.org/classifiers/
classifiers = [
    'Development Status :: 4 - Beta',
    'License :: OSI Approved :: MIT License',
    'Intended Audience :: Science/Research',
    'Natural Language :: English',
    'Operating System :: POSIX',
    'Operating System :: MacOS',
    'Operating System :: Microsoft',
    "Programming Language :: Python :: 3",
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
]

keywords = [
    'pandas', # eg: 'keyword1', 'keyword2', 'keyword3',
]

dependencies = [
    # https://stackoverflow.com/questions/14399534
    'pandas>=1.2',
    'deprecated',
    "attrs",
]
requires-python = ">=3.9, <4"

dynamic = ["version"]

[project.urls]
changelog = "https://github.com/coroa/pandas-indexing/blob/main/CHANGELOG.rst"
documentation = "https://pandas-indexing.readthedocs.io/en/latest/"
homepage = "https://github.com/coroa/pandas-indexing"
repository = "https://github.com/coroa/pandas-indexing.git"

[project.optional-dependencies]
units = ["pint>=0.21", "openscm-units"]


[dependency-groups]
docs = [
    "sphinx>=2.2",
    "sphinx-argparse",
    "sphinx-rtd-theme",
    "myst_nb",
    "ipython",
]
test = ["coverage", "pytest", "pytest-cov", "hypothesis"]
lint = ["ruff"]

[tool.uv]
default-groups = ["test", "lint"]

[project.scripts]

[tool.pytest.ini_options]
# If a pytest section is found in one of the possible config files
# (pytest.ini, tox.ini or setup.cfg), then pytest will not look for any others,
# so if you add a pytest config section elsewhere,
# you will need to delete this section from setup.cfg.
#norecursedirs =
#migrations
addopts = "-p pytest_cov"
python_files = ["test_*.py", "*_test.py", "tests.py"]
#addopts =
#    -ra
#    --strict
#    --doctest-modules
#    --doctest-glob=\*.rst
#    --tb=short
testpaths = ["tests"]

[tool.ruff]
builtins = ["ellipsis"]
target-version = "py38"
extend-include = ['*.ipynb']

[tool.ruff.lint]
select = [
    'F',  # pyflakes
    'E',  # pycodestyle: Error
    'W',  # pycodestyle: Warning
    'I',  # isort
    'D',  # pydocstyle
    'UP', # pyupgrade
    #'ANN', # flake-8 annotations
    'TID',    # flake8-tidy-imports
    'NPY',    # numpy
    'RUF013', # ruff
]

ignore = [
    'ANN401', # Dynamically typed expressions are forbidden
    'E501',   # line too long
    'E731',   # do not assign a lambda expression, use a def
    'E741',   # ambiguous variable names
    'D100',   # Missing docstring in public module
    'D101',   # Missing docstring in public class
    'D102',   # Missing docstring in public method
    'D103',   # Missing docstring in public function
    'D104',   # Missing docstring in public package
    'D105',   # Missing docstring in magic method
    'D107',   # Missing docstring in `__init__`
    'D200',   # One-line docstring should fit on one line
    'D203',   # 1 blank line required before class docstring
    'D212',   # Multi-line docstring summary should start at the second line
    'D401',   # First line should be in imperative mood
    'D407',   # Missing dashed line
    'D417',   # Missing argument description in the doc-string
    'TID252', # Prefer absolute imports over relative imports from parent modules
]


exclude = [".eggs", "doc", "_typed_ops.pyi", "tests/*.py"]

[tool.ruff.lint.per-file-ignores]
# F401: imported but unsued
"__init__.py" = ["F401"]
"src/pandas_indexing/iamc/resolver.py" = ["D200", "D400", "D415"]

[tool.ruff.lint.isort]
known-first-party = ["pandas_indexing"]
lines-after-imports = 2

[tool.setuptools_scm]
fallback_version = "999"

[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=46.1.0", "setuptools_scm[toml]>=6.2"]
